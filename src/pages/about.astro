---
import Main from '../layouts/Main.astro'
---

<style>
  .hero {
    display: flex;
    flex-direction: column;
    gap: var(--size-8);
    place-content: end;
    padding-block-start: var(--size-12);
    background: url(../content/images/me.jpg);
    background-size: cover;
    background-position: center;
    background-attachment: fixed;

    /* &::after {
      content: '';
      display: block;
      position: absolute;
      inset: 0;
      background-color: red;
      mix-blend-mode: color-burn;
    } */
  }

  p {
    margin-block-start: 5rem;
  }
</style>

<Main>
  <div class="hero container">
    <h1>Creative for hire.</h1>
  </div>
  <div class="content container">
    <p>
      Over the past twenty years, I've worked across nearly every creative
      discipline —from Motion and Interactive Design to Creative Director, Unity
      Developer to .NET Solutions Architect. I've seen a lot, from small
      startups to Fortune 500, and I come back to the Web. It's our most
      far-reaching platform.
    </p>
    <p>
      Based in Charlotte, NC, I'm open to opportunities outside the area, or
      abroad. Location isn't a concern—what matters is the role. I'm looking for
      a position that challenges me, offers room to grow, and values the power
      of a strong, talented team.
    </p>
  </div>
</Main>

<script>
  // import { animate } from 'animejs'
  // import { wrapText, type Options } from '../effects/TextWrapper'

  // const opts: Options = {
  //   attributes: {
  //     style: `display: inline-block;`,
  //   },
  // }

  // document.querySelectorAll('.container h1').forEach((el) => wrapText(el, opts))

  // document.querySelectorAll('.container h1')

  // document.querySelectorAll('.container h1').forEach((el) => {
  //   const targets = el.querySelectorAll('h2 span')

  //   const enter = animate(targets, {
  //     translateY: 0,
  //     opacity: 1,
  //     easing: 'easeOutExpo',
  //     duration: 320,
  //     delay: (_, i) => 30 * i,
  //     autoplay: false,
  //   })

  //   el.addEventListener('pointerenter', () => enter.restart())
  //   el.addEventListener('pointerleave', () => enter.reverse())
  //   // el.addEventListener('focus', () => enter.restart())
  //   // el.addEventListener('blur', () => enter.reverse())
  // })
</script>
