<script>
  import { gsap } from 'gsap'

  const win = calcWinSize()
  const state = {
    win,
    mouse: {
      x: win.width / 2,
      y: win.height / 2,
    },
  }

  window.addEventListener('resize', () => (state.win = calcWinSize()))
  window.addEventListener('mousemove', (e) => (state.mouse = getMousePos(e)))

  const map = gsap.utils.mapRange
  const rand = gsap.utils.random
  const lerp = gsap.utils.interpolate

  /**
   * Custom Web Component that animates its position and rotation based on
   * the user's mouse position. Designed for hover-based 3D interactivity.
   */
  class HoverCard extends HTMLElement {
    translation = { x: 0, y: 0, z: 0 }
    rotation = { x: 0, y: 0 }

    tz: number
    rx: number
    ry: number

    xstart = rand(70, 100)
    ystart = rand(40, 65)

    rxstart = 5
    rystart = 10

    isLeft: boolean
    isTop: boolean

    requestId?: number

    tlHoverIn!: gsap.core.Timeline
    tlHoverOut!: gsap.core.Timeline

    isHovered = false

    connectedCallback() {
      this.layout()
      this.addEventListener('mouseenter', this.onMouseEnter.bind(this))
      this.addEventListener('mouseleave', this.onMouseLeave.bind(this))
      this.render()
    }

    layout() {
      const rect = this.getBoundingClientRect()

      const cx = rect.left + rect.width / 2
      const cy = rect.top + rect.height / 2
      const win = state.win

      this.isLeft = cx < win.width / 2
      this.isTop = cy < win.height / 2

      this.rotation.x = this.isTop
        ? map(0, win.height / 2, -this.rxstart, 0, cy)
        : map(win.height / 2, win.height, 0, this.rxstart, cy)

      this.rotation.y = this.isLeft
        ? map(0, win.width / 2, this.rystart, 0, cx)
        : map(win.width / 2, win.width, 0, -this.rystart, cx)

      this.translation.z = this.isLeft
        ? map(0, win.width / 2, -300, -100, cx)
        : map(win.width / 2, win.width, -100, -300, cx)

      gsap.set(this, {
        rotationX: this.rotation.x,
        rotationY: this.rotation.y,
        z: this.translation.z,
      })
    }

    onMouseEnter() {
      this.tlHoverOut?.kill()

      this.tlHoverIn = gsap.timeline().to(this, {
        duration: 0.8,
        ease: 'expo',
        scale: 1.3,
      })
    }

    onMouseLeave() {
      this.tlHoverIn?.kill()

      this.tlHoverOut = gsap.timeline().to(this, {
        duration: 1,
        ease: 'power4',
        scale: 1,
      })
    }

    render() {
      if (!this.requestId) {
        this.requestId = requestAnimationFrame(() => this.move())
      }
    }

    stop() {
      if (this.requestId) {
        cancelAnimationFrame(this.requestId)
        this.requestId = undefined
      }
    }

    move() {
      this.requestId = undefined

      if (this.isHovered === true) return

      const { win, mouse } = state

      this.translation.x = lerp(
        this.translation.x,
        map(0, win.width, -this.xstart, this.xstart, mouse.x),
        0.04,
      )

      this.translation.y = lerp(
        this.translation.y,
        map(0, win.height, -this.ystart, this.ystart, mouse.y),
        0.04,
      )

      this.rotation.x = this.isTop
        ? lerp(
            this.rotation.x,
            map(0, win.height / 2, this.rxstart, 0, mouse.y),
            0.04,
          )
        : lerp(
            this.rotation.x,
            map(win.height / 2, win.height, 0, -this.rxstart, mouse.y),
            0.04,
          )

      this.rotation.y = this.isLeft
        ? lerp(
            this.rotation.y,
            map(0, win.width / 2, -this.rystart, 0, mouse.x),
            0.04,
          )
        : lerp(
            this.rotation.y,
            map(win.width / 2, win.width, 0, this.rystart, mouse.x),
            0.04,
          )

      gsap.set(this, {
        x: -this.translation.x,
        y: -this.translation.y,
        rotationX: -this.rotation.x - this.rotation.x,
        rotationY: -this.rotation.y - this.rotation.y,
      })

      this.render()
    }
  }

  window.customElements.define('hover-card', HoverCard)

  function calcWinSize() {
    return {
      width: window.innerWidth,
      height: window.innerHeight,
    }
  }

  function getMousePos(e: MouseEvent) {
    return {
      x: e.clientX,
      y: e.clientY,
    }
  }
</script>

<style>
  hover-card {
    position: relative;
    will-change: transform;
  }
</style>

<hover-card {...Astro.props}>
  <slot />
</hover-card>
