---
const { title, image, link, description } = Astro.props
---

<script>
  import Splitting from 'splitting'
  import 'splitting/dist/splitting.css'
  import 'splitting/dist/splitting-cells.css'
  import { animate, JSAnimation } from 'animejs'
  import { preloadImage } from '../scripts/preload-images'

  class ProjectLink extends HTMLAnchorElement {
    #enter: JSAnimation

    #over() {
      this.#enter.restart()
    }

    #out() {
      this.#enter.reverse()
    }

    #resize() {
      if (window.innerWidth < 1024) {
        this.#enter.revert()
      }
    }

    #overHandler = this.#over.bind(this)
    #outHandler = this.#out.bind(this)
    #resizeHandler = this.#resize.bind(this)

    async connectedCallback() {
      this.classList.add('loading')
      this.parentElement?.style.setProperty('perspective', '1000px')

      window.addEventListener('resize', this.#resizeHandler)

      const imageURL = this.getAttribute('background-image')

      Splitting({
        target: this.querySelector('h2')!,
      })

      const targets = this.querySelectorAll('.char')

      this.#enter = animate(targets, {
        translateY: {
          from: -40,
          to: 0,
        },
        opacity: {
          from: 0,
          to: 1,
        },
        easing: 'easeOut',
        duration: 180,
        delay: (_, i) => 30 * i,
        autoplay: false,
      })

      this.addEventListener('pointerenter', this.#overHandler)
      this.addEventListener('pointerleave', this.#outHandler)

      this.#out()

      await preloadImage(imageURL)

      this.classList.remove('loading')
      this.style.setProperty('background-image', `url(${imageURL})`)

      this.dispatchEvent(new CustomEvent('project-link.loaded'))
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.#resizeHandler)

      this.removeEventListener('pointerenter', this.#overHandler)
      this.removeEventListener('pointerleave', this.#outHandler)

      this.#enter.pause()
    }
  }

  customElements.define('project-link', ProjectLink, {
    extends: 'a',
  })
</script>

<style>
  a[is='project-link'] {
    color-scheme: dark;
    color: canvastext;
    aspect-ratio: var(--ratio-landscape);
    background-size: 100%;
    background-size: cover;
    background-position: center;
    display: flex;
    flex-direction: column;
    justify-content: end;
    text-decoration: none;
    box-shadow: var(--shadow-2);
    padding: var(--size-6);
    border-radius: var(--radius-3);
    cursor: pointer;
    transition: filter 150ms;
    will-change: filter;

    &.loading {
      background-color: canvastext;
      color: transparent;
      pointer-events: none;
      animation: pulse 1s infinite alternate;
    }

    @media (min-width: 1024px) {
      filter: grayscale(1);

      .content {
        display: block;
        opacity: 0;
        transform: translateY(20px);
        transition:
          transform 150ms ease-in-out,
          opacity 150ms ease-out;
      }
    }

    &:hover,
    &:focus {
      filter: grayscale(0);

      .content {
        opacity: 1;
        transform: translateY(0);
      }
    }

    h2 {
      margin: 0;
      overflow: hidden;
    }

    .content {
      display: flex;
      flex-direction: column;
    }
  }

  p {
    margin-block: var(--size-2);
  }

  @keyframes pulse {
    from {
      opacity: 0.01;
    }
    to {
      opacity: 0.1;
    }
  }
</style>

<a is="project-link" href={link} background-image={image.url.src}>
  <span class="content">
    <h2>{title}</h2>
    <p>{description}</p>
  </span>
</a>
